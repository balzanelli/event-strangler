/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/balzanelli/event-strangler/cgo */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "exports.go"

#include <stdint.h>
#include <stdlib.h>

struct EventStranglerRecord {
  char* HashKey;
  char* Status;
  char* CreatedAt;
  char* ExpiresAt;
};
typedef struct EventStranglerRecord EventStranglerRecord;

struct EventStranglerHashKeyOptions {
  char* Name;
  char* Expression;
};
typedef struct EventStranglerHashKeyOptions EventStranglerHashKeyOptions;

struct EventStranglerConfig {
  EventStranglerHashKeyOptions* HashKey;
  uintptr_t			  	      Store;
};
typedef struct EventStranglerConfig EventStranglerConfig;

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
//typedef float _Complex GoComplex64;
//typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


/* Return type for EventStranglerDynamoDBStoreNew */
struct EventStranglerDynamoDBStoreNew_return {
  uintptr_t r0;
  char* r1;
};
extern struct EventStranglerDynamoDBStoreNew_return EventStranglerDynamoDBStoreNew(char* tableName, char* profile);
extern void EventStranglerDynamoDBStoreFree(uintptr_t dynamoDB);

/* Return type for EventStranglerLevelDBStoreNew */
struct EventStranglerLevelDBStoreNew_return {
  uintptr_t r0;
  char* r1;
};
extern struct EventStranglerLevelDBStoreNew_return EventStranglerLevelDBStoreNew(char* filepath);
extern void EventStranglerLevelDBStoreFree(uintptr_t levelDB);
extern uintptr_t EventStranglerLRUCacheStoreNew();
extern void EventStranglerLRUCacheStoreFree(uintptr_t lru);

/* Return type for EventStranglerStoreExists */
struct EventStranglerStoreExists_return {
  GoUint8 r0;
  char* r1;
};
extern struct EventStranglerStoreExists_return EventStranglerStoreExists(uintptr_t store, char* hashKey);

/* Return type for EventStranglerStoreGet */
struct EventStranglerStoreGet_return {
  struct EventStranglerRecord* r0;
  char* r1;
};
extern struct EventStranglerStoreGet_return EventStranglerStoreGet(uintptr_t store, char* hashKey);
extern char* EventStranglerStorePut(uintptr_t store, char* hashKey, struct EventStranglerRecord* record, GoInt timeToLive);
extern char* EventStranglerStoreDelete(uintptr_t store, char* hashKey);
extern char* EventStranglerStoreClose(uintptr_t store);

/* Return type for EventStranglerNew */
struct EventStranglerNew_return {
  uintptr_t r0;
  char* r1;
};
extern struct EventStranglerNew_return EventStranglerNew(struct EventStranglerConfig* config);
extern void EventStranglerFree(uintptr_t strangler);
extern char* EventStranglerComplete(uintptr_t strangler, char* hashKey);
extern char* EventStranglerPurge(uintptr_t strangler, char* hashKey);

#ifdef __cplusplus
}
#endif
