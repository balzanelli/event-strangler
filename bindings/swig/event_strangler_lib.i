/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/balzanelli/event-strangler/cgo */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "exports.go"

#include <stdint.h>
#include <stdlib.h>

struct strangler_record {
  char* hash_key;
  char* status;
  char* created_at;
  char* expires_at;
};
typedef struct strangler_record strangler_record;

struct strangler_hash_key_options {
  char* name;
  char* expression;
};
typedef struct strangler_hash_key_options strangler_hash_key_options;

struct strangler_config {
  strangler_hash_key_options* hash_key;
  uintptr_t			  	    store;
};
typedef struct strangler_config strangler_config;

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
//typedef float _Complex GoComplex64;
//typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void strangler_record_free(struct strangler_record* record);

/* Return type for strangler_leveldb_store_new */
struct strangler_leveldb_store_new_return {
  uintptr_t r0;
  char* r1;
};
extern struct strangler_leveldb_store_new_return strangler_leveldb_store_new(char* filepath);
extern void strangler_leveldb_store_free(uintptr_t leveldb);
extern uintptr_t strangler_lru_cache_store_new();
extern void strangler_lru_cache_store_free(uintptr_t lru);

/* Return type for strangler_store_exists */
struct strangler_store_exists_return {
  GoUint8 r0;
  char* r1;
};
extern struct strangler_store_exists_return strangler_store_exists(uintptr_t store, char* hash_key);

/* Return type for strangler_store_get */
struct strangler_store_get_return {
  struct strangler_record* r0;
  char* r1;
};
extern struct strangler_store_get_return strangler_store_get(uintptr_t store, char* hash_key);
extern char* strangler_store_put(uintptr_t store, char* hash_key, struct strangler_record* record, GoInt time_to_live);
extern char* strangler_store_delete(uintptr_t store, char* hash_key);
extern char* strangler_store_close(uintptr_t store);
extern void strangler_hash_key_options_free(strangler_hash_key_options* opt);

/* Return type for strangler_new */
struct strangler_new_return {
  uintptr_t r0;
  char* r1;
};
extern struct strangler_new_return strangler_new(struct strangler_config* config);
extern void strangler_free(uintptr_t strangler);
extern char* strangler_complete(uintptr_t strangler, char* hash_key);
extern char* strangler_purge(uintptr_t strangler, char* hash_key);

#ifdef __cplusplus
}
#endif
